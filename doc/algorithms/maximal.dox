/*!

@file insertion_sort.dox
@author Aida Kardanova

@page maximal Минимальное остовное дерево. Алгоритм Крускала

@section maximal_algo Описание алгоритма

В данном разделе описан алгоритм Крускала.

Алгоритм Крускала изначально помещает каждую вершину в своё дерево, а затем постепенно объединяет эти деревья, объединяя на каждой итерации два некоторых дерева некоторым ребром. Перед началом выполнения алгоритма, все рёбра сортируются по весу (в порядке неубывания). Затем начинается процесс объединения: перебираются все рёбра от первого до последнего (в порядке сортировки), и если у текущего ребра его концы принадлежат разным поддеревьям, то эти поддеревья объединяются, а ребро добавляется к ответу. По окончании перебора всех рёбер все вершины окажутся принадлежащими одному поддереву, и ответ найден.

Алгоритм реализован в функции graph::Maximal(const WeightedGraph<T>& wGraph).

*/

/*!
@fn graph::Maximal(const WeightedGraph<T>& wGraph)

Функция реализует алгоритм Крускала, описанный в разделе
@ref maximal.

Время работы алгоритма
\f$
O(M*logN + N^2),
\f$
где \f$ N \f$ --- количество вершин и \f$ M \f$ --- количество ребер. Алгоритм требует \f$ O(N+M) \f$ дополнительной
памяти.
*/
